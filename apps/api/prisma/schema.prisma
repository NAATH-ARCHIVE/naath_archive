generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  contributor
  user
}

enum AuthProvider {
  form
  google
  facebook
  x
}

enum ArticleStatus {
  draft
  published
  archived
}

enum ArtifactType {
  photo
  document
  audio
  video
}

enum ReviewStatus {
  draft
  pending_review
  published
  archived
}

enum DonationProvider {
  stripe
  flutterwave
}

enum DonationStatus {
  pending
  succeeded
  failed
  refunded
}

enum OrderStatus {
  pending
  paid
  failed
  refunded
  fulfilled
}

enum PaymentProvider {
  stripe
  flutterwave
}

model User {
  id            String        @id @default(uuid()) @db.Uuid
  role          Role          @default(user)
  first_name    String
  last_name     String
  email         String        @unique
  phone         String?
  auth_provider AuthProvider  @default(form)
  password_hash String?
  locale        String        @default("en")
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  articles      Article[]
  comments      Comment[]
  commentLikes  CommentLike[]
  artifacts     Artifact[]    @relation("ArtifactContributor")
  reviewed      Artifact[]    @relation("ArtifactReviewer")
  oralHistories OralHistory[] @relation("OralHistoryContributor")
  reviewedOH    OralHistory[] @relation("OralHistoryReviewer")
  events        Event[]       @relation("EventCreator")
  orders        Order[]
  donations     Donation[]

  @@index([email])
}

model Article {
  id            String        @id @default(uuid()) @db.Uuid
  slug          String        @unique
  title         String
  excerpt       String?
  content       String
  cover_image   String?
  author_id     String
  status        ArticleStatus @default(draft)
  published_at  DateTime?
  comment_count Int           @default(0)
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt

  author        User          @relation(fields: [author_id], references: [id])
  comments      Comment[]

  @@index([status, published_at])
}

model Comment {
  id         String   @id @default(uuid()) @db.Uuid
  article_id String
  author_id  String
  parent_id  String?
  body       String
  like_count Int      @default(0)
  path       String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  article    Article  @relation(fields: [article_id], references: [id])
  author     User     @relation(fields: [author_id], references: [id])
  parent     Comment? @relation("CommentToComment", fields: [parent_id], references: [id])
  children   Comment[] @relation("CommentToComment")
  likes      CommentLike[]

  @@index([article_id, parent_id])
}

model CommentLike {
  id         String   @id @default(uuid()) @db.Uuid
  comment_id String
  user_id    String
  created_at DateTime @default(now())

  comment Comment @relation(fields: [comment_id], references: [id])
  user    User    @relation(fields: [user_id], references: [id])

  @@unique([comment_id, user_id])
}

model Artifact {
  id             String       @id @default(uuid()) @db.Uuid
  title          String
  slug           String       @unique
  description    String
  type           ArtifactType
  media_url      String
  thumbnail_url  String?
  source         String?
  tags           String[]
  language       String       @default("naath")
  status         ReviewStatus @default(draft)
  contributor_id String
  reviewer_id    String?
  published_at   DateTime?
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt

  contributor User  @relation("ArtifactContributor", fields: [contributor_id], references: [id])
  reviewer    User? @relation("ArtifactReviewer", fields: [reviewer_id], references: [id])
}

model OralHistory {
  id             String       @id @default(uuid()) @db.Uuid
  title          String
  narrator       String
  recording_url  String
  duration_sec   Int
  transcript     String
  language       String
  tags           String[]
  status         ReviewStatus @default(draft)
  contributor_id String
  reviewer_id    String?
  published_at   DateTime?
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt

  contributor User  @relation("OralHistoryContributor", fields: [contributor_id], references: [id])
  reviewer    User? @relation("OralHistoryReviewer", fields: [reviewer_id], references: [id])
}

model ResearchItem {
  id         String   @id @default(uuid()) @db.Uuid
  title      String
  authors    String[]
  abstract   String
  pdf_url    String
  year       Int
  tags       String[]
  status     String   @default("draft")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model EducationResource {
  id           String   @id @default(uuid()) @db.Uuid
  title        String
  grade_levels String[]
  content      String
  media        String[]
  language     String
  tags         String[]
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model Event {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  description String
  start       DateTime
  end         DateTime
  location    String
  category    String
  rsvp_url    String?
  created_by  String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  creator User @relation("EventCreator", fields: [created_by], references: [id])
}

model Donation {
  id            String           @id @default(uuid()) @db.Uuid
  user_id       String?
  amount        Decimal          @db.Decimal(12, 2)
  currency      String           @default("USD")
  provider      DonationProvider
  status        DonationStatus   @default(pending)
  receipt_url   String?
  created_at    DateTime         @default(now())

  user User? @relation(fields: [user_id], references: [id])
}

model Product {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  slug        String   @unique
  description String
  price       Decimal  @db.Decimal(12, 2)
  currency    String
  images      String[]
  inventory   Int
  active      Boolean
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  orderItems  OrderItem[]
}

model OrderItem {
  id          String  @id @default(uuid()) @db.Uuid
  order_id    String
  product_id  String
  qty         Int
  unit_price  Decimal @db.Decimal(12, 2)

  order   Order   @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])
}

model Order {
  id               String         @id @default(uuid()) @db.Uuid
  user_id          String?
  total            Decimal        @db.Decimal(12, 2)
  currency         String
  payment_provider PaymentProvider
  status           OrderStatus    @default(pending)
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt

  user   User?       @relation(fields: [user_id], references: [id])
  items  OrderItem[]
}


