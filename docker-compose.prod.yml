version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: naath_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-naath_archive}
      POSTGRES_USER: ${DB_USER:-naath_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-naath_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - ./database/backups:/backups
    networks:
      - naath_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-naath_user} -d ${DB_NAME:-naath_archive}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: naath_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-naath_redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - naath_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: naath_backend_prod
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-naath_archive}
      - DB_USER=${DB_USER:-naath_user}
      - DB_PASSWORD=${DB_PASSWORD:-naath_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-naath_redis_password}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-7d}
      - CORS_ORIGIN=${CORS_ORIGIN:-https://yourdomain.com}
      - RATE_LIMIT_WINDOW_MS=${RATE_LIMIT_WINDOW_MS:-900000}
      - RATE_LIMIT_MAX_REQUESTS=${RATE_LIMIT_MAX_REQUESTS:-100}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - naath_network
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: naath_frontend_prod
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-80}:80"
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://localhost:5000}
      - VITE_APP_NAME=${VITE_APP_NAME:-Naath Archive}
      - VITE_APP_VERSION=${VITE_APP_VERSION:-1.0.0}
    depends_on:
      - backend
    networks:
      - naath_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: naath_nginx_prod
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-443}:443"
      - "${NGINX_HTTP_PORT:-80}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - naath_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: naath_certbot_prod
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./logs/certbot:/var/log/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/html --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
    depends_on:
      - nginx
    networks:
      - naath_network

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: naath_backup_prod
    restart: "no"
    environment:
      POSTGRES_DB: ${DB_NAME:-naath_archive}
      POSTGRES_USER: ${DB_USER:-naath_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-naath_password}
    volumes:
      - ./database/backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - postgres
    networks:
      - naath_network
    command: sh -c "chmod +x /backup.sh && /backup.sh"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  naath_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Health check and restart policies
x-common: &common
  restart: unless-stopped
  logging:
    driver: "json-file"
    options:
      max-size: "10m"
      max-file: "3"
